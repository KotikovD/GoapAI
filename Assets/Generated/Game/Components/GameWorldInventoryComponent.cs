//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity worldInventoryEntity { get { return GetGroup(GameMatcher.WorldInventory).GetSingleEntity(); } }
    public WorldInventoryComponent worldInventory { get { return worldInventoryEntity.worldInventory; } }
    public bool hasWorldInventory { get { return worldInventoryEntity != null; } }

    public GameEntity SetWorldInventory(IRepository<ResourceType> newInventory) {
        if (hasWorldInventory) {
            throw new Entitas.EntitasException("Could not set WorldInventory!\n" + this + " already has an entity with WorldInventoryComponent!",
                "You should check if the context already has a worldInventoryEntity before setting it or use context.ReplaceWorldInventory().");
        }
        var entity = CreateEntity();
        entity.AddWorldInventory(newInventory);
        return entity;
    }

    public void ReplaceWorldInventory(IRepository<ResourceType> newInventory) {
        var entity = worldInventoryEntity;
        if (entity == null) {
            entity = SetWorldInventory(newInventory);
        } else {
            entity.ReplaceWorldInventory(newInventory);
        }
    }

    public void RemoveWorldInventory() {
        worldInventoryEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public WorldInventoryComponent worldInventory { get { return (WorldInventoryComponent)GetComponent(GameComponentsLookup.WorldInventory); } }
    public bool hasWorldInventory { get { return HasComponent(GameComponentsLookup.WorldInventory); } }

    public void AddWorldInventory(IRepository<ResourceType> newInventory) {
        var index = GameComponentsLookup.WorldInventory;
        var component = (WorldInventoryComponent)CreateComponent(index, typeof(WorldInventoryComponent));
        component.Inventory = newInventory;
        AddComponent(index, component);
    }

    public void ReplaceWorldInventory(IRepository<ResourceType> newInventory) {
        var index = GameComponentsLookup.WorldInventory;
        var component = (WorldInventoryComponent)CreateComponent(index, typeof(WorldInventoryComponent));
        component.Inventory = newInventory;
        ReplaceComponent(index, component);
    }

    public void RemoveWorldInventory() {
        RemoveComponent(GameComponentsLookup.WorldInventory);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWorldInventory;

    public static Entitas.IMatcher<GameEntity> WorldInventory {
        get {
            if (_matcherWorldInventory == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WorldInventory);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWorldInventory = matcher;
            }

            return _matcherWorldInventory;
        }
    }
}
